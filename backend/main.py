from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, EmailStr
from motor.motor_asyncio import AsyncIOMotorClient
from datetime import datetime
import os
from typing import Optional
import aiosmtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import asyncio

# App configuration
app = FastAPI(title="FormLog API", version="1.0.0")

# CORS configuration
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],  # Frontend React
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Database configuration
MONGODB_URL = os.getenv("MONGODB_URL", "mongodb://admin:password@localhost:27017/formlog?authSource=admin")
DATABASE_NAME = os.getenv("DATABASE_NAME", "formlog")
COLLECTION_NAME = os.getenv("COLLECTION_NAME", "contacts")

# Email configuration
SMTP_SERVER = os.getenv("SMTP_SERVER", "smtp.gmail.com")
SMTP_PORT = int(os.getenv("SMTP_PORT", "587"))
SMTP_USERNAME = os.getenv("SMTP_USERNAME", "")  # Your Gmail address
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD", "")  # Your Gmail App Password
RECIPIENT_EMAIL = os.getenv("RECIPIENT_EMAIL", "pietrodelfranco00@gmail.com")

client: Optional[AsyncIOMotorClient] = None

# Pydantic models
class ContactForm(BaseModel):
    name: str
    email: EmailStr
    message: str

class ContactResponse(BaseModel):
    id: str
    name: str
    email: str
    message: str
    created_date: datetime

# Email sending function
async def send_notification_email(contact_data: dict):
    """Send email notification when a new contact form is submitted"""
    
    if not SMTP_USERNAME or not SMTP_PASSWORD:
        print("‚ö†Ô∏è SMTP credentials not configured. Email notification skipped.")
        return False
    
    try:
        # Create email content
        subject = "üîî New Contact Form Submission - FormLog"
        
        html_body = f"""
        <html>
        <body style="font-family: Arial, sans-serif; margin: 40px; background-color: #f5f5f5;">
            <div style="background: white; padding: 30px; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
                <h2 style="color: #667eea; margin-bottom: 20px;">üìß New Contact Form Submission</h2>
                
                <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
                    <p><strong>üë§ Name:</strong> {contact_data.get('name', 'N/A')}</p>
                    <p><strong>üìß Email:</strong> {contact_data.get('email', 'N/A')}</p>
                    <p><strong>üìÖ Date:</strong> {contact_data.get('created_date', 'N/A')}</p>
                </div>
                
                <div style="background: #e7f3ff; padding: 20px; border-radius: 8px; border-left: 4px solid #667eea;">
                    <h3 style="color: #333; margin-top: 0;">üí¨ Message:</h3>
                    <p style="white-space: pre-wrap; color: #555;">{contact_data.get('message', 'N/A')}</p>
                </div>
                
                <div style="margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #888; font-size: 12px;">
                    <p>This email was automatically generated by FormLog application.</p>
                    <p>üöÄ Sent from: FormLog Contact System</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        # Create email message
        message = MIMEMultipart("alternative")
        message["Subject"] = subject
        message["From"] = SMTP_USERNAME
        message["To"] = RECIPIENT_EMAIL
        
        # Add HTML content
        html_part = MIMEText(html_body, "html")
        message.attach(html_part)
        
        # Send email
        await aiosmtplib.send(
            message,
            hostname=SMTP_SERVER,
            port=SMTP_PORT,
            start_tls=True,
            username=SMTP_USERNAME,
            password=SMTP_PASSWORD,
        )
        
        print(f"‚úÖ Email notification sent successfully to {RECIPIENT_EMAIL}")
        return True
        
    except Exception as e:
        print(f"‚ùå Failed to send email notification: {e}")
        return False

# Startup and shutdown events
@app.on_event("startup")
async def startup_db_client():
    global client
    client = AsyncIOMotorClient(MONGODB_URL)
    try:
        # Connection test
        await client.admin.command('ping')
        print("‚úÖ Connected to MongoDB!")
    except Exception as e:
        print(f"‚ùå MongoDB connection error: {e}")

@app.on_event("shutdown")
async def shutdown_db_client():
    global client
    if client:
        client.close()

# Contact form endpoint
@app.post("/api/contacts", response_model=dict)
async def create_contact(contact: ContactForm):
    try:
        # Prepare data for database
        contact_data = {
            "name": contact.name,
            "email": contact.email,
            "message": contact.message,
            "created_date": datetime.now()
        }
        
        # Insert into database
        db = client[DATABASE_NAME]
        collection = db[COLLECTION_NAME]
        result = await collection.insert_one(contact_data)
        
        # Send email notification (async, don't wait for it)
        asyncio.create_task(send_notification_email(contact_data))
        
        return {
            "success": True,
            "message": "Message sent successfully!",
            "contact_id": str(result.inserted_id)
        }
    
    except Exception as e:
        print(f"Error during insertion: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

# Endpoint to retrieve all contacts (optional, for debug)
@app.get("/api/contacts")
async def get_contacts():
    try:
        db = client[DATABASE_NAME]
        collection = db[COLLECTION_NAME]
        contacts = []
        
        async for contact in collection.find():
            contacts.append({
                "id": str(contact["_id"]),
                "name": contact["name"],
                "email": contact["email"],
                "message": contact["message"],
                "created_date": contact["created_date"]
            })
        
        return {"contacts": contacts}
    
    except Exception as e:
        print(f"Error during retrieval: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

# Health check endpoint
@app.get("/api/health")
async def health_check():
    return {"status": "OK", "message": "API working"}

# Root endpoint
@app.get("/")
async def root():
    return {"message": "FormLog API - Server running!"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 